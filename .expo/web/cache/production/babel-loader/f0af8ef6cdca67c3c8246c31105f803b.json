{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.get=get;exports.getEnforcing=getEnforcing;var _invariant=_interopRequireDefault(require(\"invariant\"));var NativeModules=require('../BatchedBridge/NativeModules');var turboModuleProxy=global.__turboModuleProxy;function requireModule(name){if(global.RN$Bridgeless!==true){var legacyModule=NativeModules[name];if(legacyModule!=null){return legacyModule;}}if(turboModuleProxy!=null){var module=turboModuleProxy(name);return module;}return null;}function get(name){return requireModule(name);}function getEnforcing(name){var module=requireModule(name);(0,_invariant.default)(module!=null,\"TurboModuleRegistry.getEnforcing(...): '\"+name+\"' could not be found. \"+'Verify that a module by this name is registered in the native binary.');return module;}","map":{"version":3,"sources":["/Users/uheron/IH/RNStorybook/node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js"],"names":["NativeModules","require","turboModuleProxy","global","__turboModuleProxy","requireModule","name","RN$Bridgeless","legacyModule","module","get","getEnforcing"],"mappings":"8LAYA,4DAFA,GAAMA,CAAAA,aAAa,CAAGC,OAAO,CAAC,gCAAD,CAA7B,CAIA,GAAMC,CAAAA,gBAAgB,CAAGC,MAAM,CAACC,kBAAhC,CAEA,QAASC,CAAAA,aAAT,CAAuCC,IAAvC,CAAyD,CAEvD,GAAIH,MAAM,CAACI,aAAP,GAAyB,IAA7B,CAAmC,CAEjC,GAAMC,CAAAA,YAAY,CAAGR,aAAa,CAACM,IAAD,CAAlC,CACA,GAAIE,YAAY,EAAI,IAApB,CAA0B,CACxB,MAASA,CAAAA,YAAT,CACD,CACF,CAED,GAAIN,gBAAgB,EAAI,IAAxB,CAA8B,CAC5B,GAAMO,CAAAA,MAAU,CAAGP,gBAAgB,CAACI,IAAD,CAAnC,CACA,MAAOG,CAAAA,MAAP,CACD,CAED,MAAO,KAAP,CACD,CAEM,QAASC,CAAAA,GAAT,CAA6BJ,IAA7B,CAA+C,CACpD,MAAOD,CAAAA,aAAa,CAAIC,IAAJ,CAApB,CACD,CAEM,QAASK,CAAAA,YAAT,CAAsCL,IAAtC,CAAuD,CAC5D,GAAMG,CAAAA,MAAM,CAAGJ,aAAa,CAAIC,IAAJ,CAA5B,CACA,uBACEG,MAAM,EAAI,IADZ,CAEE,2CAA2CH,IAA3C,0BACE,uEAHJ,EAKA,MAAOG,CAAAA,MAAP,CACD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nimport type {TurboModule} from './RCTExport';\nimport invariant from 'invariant';\n\nconst turboModuleProxy = global.__turboModuleProxy;\n\nfunction requireModule<T: TurboModule>(name: string): ?T {\n  // Bridgeless mode requires TurboModules\n  if (global.RN$Bridgeless !== true) {\n    // Backward compatibility layer during migration.\n    const legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return ((legacyModule: $FlowFixMe): T);\n    }\n  }\n\n  if (turboModuleProxy != null) {\n    const module: ?T = turboModuleProxy(name);\n    return module;\n  }\n\n  return null;\n}\n\nexport function get<T: TurboModule>(name: string): ?T {\n  return requireModule<T>(name);\n}\n\nexport function getEnforcing<T: TurboModule>(name: string): T {\n  const module = requireModule<T>(name);\n  invariant(\n    module != null,\n    `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` +\n      'Verify that a module by this name is registered in the native binary.',\n  );\n  return module;\n}\n"]},"metadata":{},"sourceType":"script"}