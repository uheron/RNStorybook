{"ast":null,"code":"'use strict';function defineLazyObjectProperty(object,name,descriptor){var get=descriptor.get;var enumerable=descriptor.enumerable!==false;var writable=descriptor.writable!==false;var value;var valueSet=false;function getValue(){if(!valueSet){valueSet=true;setValue(get());}return value;}function setValue(newValue){value=newValue;valueSet=true;Object.defineProperty(object,name,{value:newValue,configurable:true,enumerable:enumerable,writable:writable});}Object.defineProperty(object,name,{get:getValue,set:setValue,configurable:true,enumerable:enumerable});}module.exports=defineLazyObjectProperty;","map":{"version":3,"sources":["/Users/uheron/IH/RNStorybook/node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js"],"names":["defineLazyObjectProperty","object","name","descriptor","get","enumerable","writable","value","valueSet","getValue","setValue","newValue","Object","defineProperty","configurable","set","module","exports"],"mappings":"AAUA,aAKA,QAASA,CAAAA,wBAAT,CACEC,MADF,CAEEC,IAFF,CAGEC,UAHF,CASQ,CACN,GAAOC,CAAAA,GAAP,CAAcD,UAAd,CAAOC,GAAP,CACA,GAAMC,CAAAA,UAAU,CAAGF,UAAU,CAACE,UAAX,GAA0B,KAA7C,CACA,GAAMC,CAAAA,QAAQ,CAAGH,UAAU,CAACG,QAAX,GAAwB,KAAzC,CAEA,GAAIC,CAAAA,KAAJ,CACA,GAAIC,CAAAA,QAAQ,CAAG,KAAf,CACA,QAASC,CAAAA,QAAT,EAAuB,CAIrB,GAAI,CAACD,QAAL,CAAe,CAMbA,QAAQ,CAAG,IAAX,CACAE,QAAQ,CAACN,GAAG,EAAJ,CAAR,CACD,CACD,MAAOG,CAAAA,KAAP,CACD,CACD,QAASG,CAAAA,QAAT,CAAkBC,QAAlB,CAAqC,CACnCJ,KAAK,CAAGI,QAAR,CACAH,QAAQ,CAAG,IAAX,CACAI,MAAM,CAACC,cAAP,CAAsBZ,MAAtB,CAA8BC,IAA9B,CAAoC,CAClCK,KAAK,CAAEI,QAD2B,CAElCG,YAAY,CAAE,IAFoB,CAGlCT,UAAU,CAAVA,UAHkC,CAIlCC,QAAQ,CAARA,QAJkC,CAApC,EAMD,CAEDM,MAAM,CAACC,cAAP,CAAsBZ,MAAtB,CAA8BC,IAA9B,CAAoC,CAClCE,GAAG,CAAEK,QAD6B,CAElCM,GAAG,CAAEL,QAF6B,CAGlCI,YAAY,CAAE,IAHoB,CAIlCT,UAAU,CAAVA,UAJkC,CAApC,EAMD,CAEDW,MAAM,CAACC,OAAP,CAAiBjB,wBAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Defines a lazily evaluated property on the supplied `object`.\n */\nfunction defineLazyObjectProperty<T>(\n  object: interface {},\n  name: string,\n  descriptor: {\n    get: () => T,\n    enumerable?: boolean,\n    writable?: boolean,\n    ...\n  },\n): void {\n  const {get} = descriptor;\n  const enumerable = descriptor.enumerable !== false;\n  const writable = descriptor.writable !== false;\n\n  let value;\n  let valueSet = false;\n  function getValue(): T {\n    // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\n    // `setValue` which calls `Object.defineProperty` which somehow triggers\n    // `getValue` again. Adding `valueSet` breaks this loop.\n    if (!valueSet) {\n      // Calling `get()` here can trigger an infinite loop if it fails to\n      // remove the getter on the property, which can happen when executing\n      // JS in a V8 context.  `valueSet = true` will break this loop, and\n      // sets the value of the property to undefined, until the code in `get()`\n      // finishes, at which point the property is set to the correct value.\n      valueSet = true;\n      setValue(get());\n    }\n    return value;\n  }\n  function setValue(newValue: T): void {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable,\n      writable,\n    });\n  }\n\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable,\n  });\n}\n\nmodule.exports = defineLazyObjectProperty;\n"]},"metadata":{},"sourceType":"script"}