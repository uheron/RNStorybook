{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _NativeSourceCode=_interopRequireDefault(require(\"../../NativeModules/specs/NativeSourceCode\"));var _cachedDevServerURL;var _cachedFullBundleURL;var FALLBACK='http://localhost:8081/';function getDevServer(){var _cachedDevServerURL2;if(_cachedDevServerURL===undefined){var scriptUrl=_NativeSourceCode.default.getConstants().scriptURL;var match=scriptUrl.match(/^https?:\\/\\/.*?\\//);_cachedDevServerURL=match?match[0]:null;_cachedFullBundleURL=match?scriptUrl:null;}return{url:(_cachedDevServerURL2=_cachedDevServerURL)!=null?_cachedDevServerURL2:FALLBACK,fullBundleUrl:_cachedFullBundleURL,bundleLoadedFromServer:_cachedDevServerURL!==null};}module.exports=getDevServer;","map":{"version":3,"sources":["/Users/uheron/IH/RNStorybook/node_modules/react-native/Libraries/Core/Devtools/getDevServer.js"],"names":["_cachedDevServerURL","_cachedFullBundleURL","FALLBACK","getDevServer","undefined","scriptUrl","NativeSourceCode","getConstants","scriptURL","match","url","fullBundleUrl","bundleLoadedFromServer","module","exports"],"mappings":"mFAUA,oGAEA,GAAIA,CAAAA,mBAAJ,CACA,GAAIC,CAAAA,oBAAJ,CACA,GAAMC,CAAAA,QAAQ,CAAG,wBAAjB,CAaA,QAASC,CAAAA,YAAT,EAAuC,0BACrC,GAAIH,mBAAmB,GAAKI,SAA5B,CAAuC,CACrC,GAAMC,CAAAA,SAAS,CAAGC,0BAAiBC,YAAjB,GAAgCC,SAAlD,CACA,GAAMC,CAAAA,KAAK,CAAGJ,SAAS,CAACI,KAAV,CAAgB,mBAAhB,CAAd,CACAT,mBAAmB,CAAGS,KAAK,CAAGA,KAAK,CAAC,CAAD,CAAR,CAAc,IAAzC,CACAR,oBAAoB,CAAGQ,KAAK,CAAGJ,SAAH,CAAe,IAA3C,CACD,CAED,MAAO,CACLK,GAAG,uBAAEV,mBAAF,6BAAyBE,QADvB,CAELS,aAAa,CAAEV,oBAFV,CAGLW,sBAAsB,CAAEZ,mBAAmB,GAAK,IAH3C,CAAP,CAKD,CAEDa,MAAM,CAACC,OAAP,CAAiBX,YAAjB","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativeSourceCode from '../../NativeModules/specs/NativeSourceCode';\n\nlet _cachedDevServerURL: ?string;\nlet _cachedFullBundleURL: ?string;\nconst FALLBACK = 'http://localhost:8081/';\n\ntype DevServerInfo = {\n  url: string,\n  fullBundleUrl: ?string,\n  bundleLoadedFromServer: boolean,\n  ...\n};\n\n/**\n * Many RN development tools rely on the development server (packager) running\n * @return URL to packager with trailing slash\n */\nfunction getDevServer(): DevServerInfo {\n  if (_cachedDevServerURL === undefined) {\n    const scriptUrl = NativeSourceCode.getConstants().scriptURL;\n    const match = scriptUrl.match(/^https?:\\/\\/.*?\\//);\n    _cachedDevServerURL = match ? match[0] : null;\n    _cachedFullBundleURL = match ? scriptUrl : null;\n  }\n\n  return {\n    url: _cachedDevServerURL ?? FALLBACK,\n    fullBundleUrl: _cachedFullBundleURL,\n    bundleLoadedFromServer: _cachedDevServerURL !== null,\n  };\n}\n\nmodule.exports = getDevServer;\n"]},"metadata":{},"sourceType":"script"}